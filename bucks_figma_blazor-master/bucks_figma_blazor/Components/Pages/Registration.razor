@page "/registration"
@inject IHttpClientFactory HttpClientFactory

<NavBar BackgroundColor="#180431" />



<div style="height: 80px"></div>
<div class="gradient">Bucks Hackathon Registration</div>

<div class="body">
    <div style="display: flex; flex-direction: column; justify-content: center">

        <div class="halo-div" style="box-shadow: 100vw -20vw 20vw 20vw #cdebf7;"></div>
        <div class="halo-div" style="box-shadow: 0vw -5vw 20vw 20vw #e0cdf7;"></div>
        <div class="halo-div" style="box-shadow: 90vw 30vw 20vw 20vw #e8dff2;"></div>
        
        <FormItem Class="form-group" Heading="Team Name" Watermark="Your Team's Name" Style="width: 450px; align-self: center"/>
        <div style="display: flex; flex-direction: row; justify-content: center">

            <div style="width: 450px">
                <FormItem Class="form-group" Heading="Member Count" Watermark="Your Team's Member Count" Type="FormItem.FormItemType.Integer" Validator="ValidateTeamSize" Default="1" />
                <FormItem Class="form-group" Heading="Institution" Watermark="Your Institution" Validator="ValidateNotEmpty" ValueChanged="s => Form.Institution = s" />
                <FormItem Class="form-group" Heading="Phone Number" Watermark="XXX-XXX-XXXX" Validator="ValidateNotEmpty" ValueChanged="s => Form.PhoneNumber = s" />
                <FormItem Class="form-group" Heading="Email" Watermark="name@example.com" Validator="ValidateNotEmpty" ValueChanged="s => Form.Email = s" />
                 <div style="height: 50px"></div>
            </div>
            <div class="form-group" style="width: 450px;">
                <div style="margin-bottom: -2.9vw">Member Names</div>
                @for (int i = 0; i < Form.GroupNames.Length; i++)
                {
                    int loc = i;
                    <FormItem Watermark="@($"{ToOrdinal(i + 1)} Member's Name")" Style="margin-top: 2vw; margin-bottom: 2vw" Validator="ValidateNotEmpty" ValueChanged="s => Form.GroupNames[loc] = s" />
                }
            </div>
        </div>
    </div>
    <div style="display: flex; flex-direction: row; align-items: center; justify-content: center;">
        <button type="submit" class="button" style="align-self: center; margin-bottom: 4vw; @(hasSubmitted ? "background: gray" : "")" @onclick="Submit">Submit</button>
    </div>

@for(int i = 0; i < Toasts.Count; i++)
{
    ToastItem toastItem = Toasts[i];

    <div style="position: fixed; top: calc(100% - 100px - @($"{i * 80}px")); left: 30px; animation: @(toastItem.Progress == 1 ? "slide-out 1s ease forwards" : "none");">
        <div class="toast-container" style="color: @toastItem.Color; display: flex; flex-direction: row; align-items: center; justify-content: space-between; width: 100%; padding: 20px">
            @toastItem.Text
        </div>
        <div class="toast-container" style="background-color: @toastItem.Color; height: 4px; width: 100%"></div>
    </div>
}
</div>

<Footer />

<style>
    .halo-div {
        position: absolute;
        border-radius: 50%;
        background-color: transparent;
        z-index: -1;
        left: -10vw; 
        height: -10vw; 
    }

    .toast-container {
        position: relative;
        background-color: palegoldenrod;
        width: 360px;
        height: 60px;
        align-content: center;
        text-align: center;
        font-size: 20px;
        font-weight: 700;
        left: 0;
        right: 0;
    }

    @@keyframes slide-out {
        0% {
            transform: translateX(0);
        }
        100% {
            transform: translateX(-100vw);
        }
    }

    .filter-red {
        filter: brightness(0) saturate(100%) invert(17%) sepia(72%) saturate(2277%) hue-rotate(340deg) brightness(134%) contrast(108%);
    }

    .body {
        height: fit-content;
        padding: 20px;
    }

    .form-group {
        margin: 2vw;
        color: black;
        font-weight: 800;
        font-size: 1.5vw;
    }

    .btn {
        margin-top: 10px;
    }

    .gradient {
        font-size: 4vw;
        font-weight: 800;
        width: fit-content;
        margin: 2%;
        background-image: linear-gradient(to right, #C01FFC, #0380EC);
        background-clip: text;
        color: transparent;
        margin-left: 7%;
    }

    .button {
        width: 10vw;
        aspect-ratio: 16/5;
        border-radius: 5vw;
        background: linear-gradient(to left, #C01FFC, #0380EC);
        color: white;
        border: none;
        font-size: large;
        cursor: pointer;
    }

        .button:hover {
            background: linear-gradient(to right, #180431, #180431);
        }
</style>

@code {
    public FormModel Form { get; set; } = new()
    {
        GroupNames = new string[1],
        MemberCount = 1,
    };

    private bool hasSubmitted = false;
    private List<ToastItem> Toasts = new();

    private async Task Submit()
    {
        if(hasSubmitted)
        {
            return;
        }

        if (Form.Email is not null && Form.Institution is not null && Form.PhoneNumber is not null && Form.GroupNames.All(s => !string.IsNullOrWhiteSpace(s)))
        {
            var client = HttpClientFactory.CreateClient("Default");
            var result = await client.PostAsJsonAsync("api/registration/submit", Form);

            ToastItem x;

            if (!result.IsSuccessStatusCode)
            {
                Toasts.Add(x = new ToastItem() { Color = "#DC2625", Text = $"Internal Server Error: {(int)result.StatusCode}" });
            }
            else
            {
                Toasts.Add(x = new ToastItem() { Color = "#0a9113", Text = "Register Success! Have a great day!" });
                hasSubmitted = true;
            }

            StateHasChanged();
            await Task.Delay(2000);
            x.Progress = 1;
            StateHasChanged();
            await Task.Delay(800);

            StateHasChanged();
            Toasts.Remove(x);
        }
    }

    public static string ToOrdinal(int number) => number switch
    {
        1 => $"{number}st",
        2 => $"{number}nd",
        3 => $"{number}rd",
        _ => $"{number}th",
    };

    private bool ValidateEmail(string @new, out string? err)
    {
        if (FormModel.IsValidEmail().IsMatch(@new))
        {
            err = null;
            return true;
        }
        err = "Invalid Email";
        return false;
    }

    private bool ValidateTeamSize(string @new, out string? err)
    {
        if (int.TryParse(@new, out int result))
        {
            if (result <= 0)
            {
                err = "Must be positive";
                return false;
            }
            if (result > 5)
            {
                err = "Group member max is 5";
                return false;
            }

            Form.MemberCount = result;
            Form.GroupNames = new string[Form.MemberCount];
            StateHasChanged();
            err = null;
            return true;
        }

        err = "Must be a whole number";
        return false;
    }

    private bool ValidateNotEmpty(string @new, out string? err)
    {
        if (string.IsNullOrWhiteSpace(@new))
        {
            err = "Required";
            return false;
        }

        err = null;
        return true;
    }

    internal class ToastItem
    {
        public required string Color { get; set; } 
        public required string Text { get; set; }
        public int Progress { get; set; }
    }
}